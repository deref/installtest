on: create

jobs:
  test-job:
    name: Test on:create trigger
    runs-on: ubuntu-latest
    steps:
      - run: echo "Hello World"
  
  integration-test:
    name: Run unit tests
    if: startsWith(github.ref, 'refs/tags/v')
    description: This would run the full suite of integration tests necessary for a release in a real project.
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.16
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache
      uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
          ~/Library/Caches/go-build
          %LocalAppData%\go-build
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Unit Test
      run: go test ./...

  create-release:
    name: Create a GH release from version tag
    runs-on: ubuntu-latest
    needs:
    - integration-test
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v1
      with:
        name: release_url
        path: release_url.txt

  publish-binaries:
    runs-on: ubuntu-latest
    needs:
    - create-release
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: ["386", amd64]
        exclude:  
        - goarch: "386"
          goos: darwin 
    steps:
    - uses: actions/checkout@v2
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v1
      with:
        name: release_url
    - name: Set environment variables
      env:
        TAG_REF_NAME: ${{ github.ref }}
        REPOSITORY_NAME: ${{ github.repository }}
        ARTIFACT_DIR: ./artifacts
      run: |
        export BASE_NAME=${REPOSITORY_NAME##*/}
        export RELEASE_VERSION=${TAG_REF_NAME##*/v}
        export BINARY_NAME="${BASE_NAME}-${RELEASE_VERSION}-${{ matrix.goos }}-${{ matrix.goarch }}"
        echo "binary_name=$BINARY_NAME" >> $GITHUB_ENV
        echo "artifact_dir=$ARTIFACT_DIR" >> $GITHUB_ENV
        echo "binary_path=${ARTIFACT_DIR}/${BINARY_NAME}" >> $GITHUB_ENV
    - name: Build
      run: |
        mkdir -p "${{ env.artifact_dir }}"
        go generate
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o "${{ env.binary_path }}"
    - name: Set Upload URL
      id: get_release_info
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ${{ env.binary_path }}
        asset_name: ${{ env.binary_name }}
        asset_content_type: application/octet-stream
    
  update-version:
    runs-on: ubuntu-latest
    needs:
    - publish-binaries
    steps:
    - uses: actions/checkout@v2
    - name: Set version
      env:
        TAG_REF_NAME: ${{ github.ref }}
      run: echo "release_version=${TAG_REF_NAME##*/v}" >> $GITHUB_ENV
    - name: Update version in CloudFlare K/V
      uses: cloudflare/wrangler-action@1.3.0
      with:
        apiToken: ${{ secrets.CF_API_TOKEN }}
        publish: false
        preCommands: wrangler kv:key put --namespace-id=dedba216553b445681f5043a2dcaee68 "installtest-version" ${{ env.release_version }}
        workingDirectory: download-page
